name: Runky Deploy Workflow

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 가져오기
        uses: actions/checkout@v4

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: corretto

      - name: Gradle 의존성 캐싱
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/caches/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle 권한 부여
        run: chmod +x ./gradlew
        shell: bash

      - name: Gradle 빌드
        run: ./gradlew clean build -x test

      - name: .env 파일 생성
        run: |
          mkdir -p ./docker
          echo "SPRING_PROFILES_ACTIVE=prod" > ./docker/.env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_HUB_NAME }}" >> ./docker/.env
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> ./docker/.env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> ./docker/.env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> ./docker/.env
          echo "MYSQL_PWD=${{ secrets.MYSQL_PWD }}" >> ./docker/.env
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> ./docker/.env
          echo "KAKAO_REDIRECT_URL=${{ secrets.KAKAO_REDIRECT_URL }}" >> ./docker/.env
          echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> ./docker/.env
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> ./docker/.env
          echo "ACCESS_ALGORITHM=${{ secrets.ACCESS_ALGORITHM }}" >> ./docker/.env
          echo "ACCESS_EXPIRATION=${{ secrets.ACCESS_EXPIRATION }}" >> ./docker/.env
          echo "REFRESH_ALGORITHM=${{ secrets.REFRESH_ALGORITHM }}" >> ./docker/.env
          echo "REFRESH_EXPIRATION=${{ secrets.REFRESH_EXPIRATION }}" >> ./docker/.env
          echo "REFRESH_HASH_ALGORITHM=${{ secrets.REFRESH_HASH_ALGORITHM }}" >> ./docker/.env
          echo "REFRESH_HASH_MODE=${{ secrets.REFRESH_HASH_MODE }}" >> ./docker/.env
          echo "REFRESH_TOKEN_PEPPER=${{ secrets.REFRESH_TOKEN_PEPPER }}" >> ./docker/.env
          echo "SIGNUP_TTL=${{ secrets.SIGNUP_TTL }}" >> ./docker/.env
          echo "TAG=${{ github.sha }}" >> ./docker/.env

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker login -u ${{secrets.DOCKER_HUB_NAME}} -p ${{secrets.DOCKER_HUB_PASSWORD}}
          docker build -t ${{secrets.DOCKER_HUB_NAME}}/runky:${{ github.sha }}  .
          docker push ${{secrets.DOCKER_HUB_NAME}}/runky:${{ github.sha }}

      - name: .env 업로드
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USERNAME}}
          key: ${{secrets.EC2_KEY}}
          source: ".env"
          target: "./docker"

      - name: Docker Compose 파일 업로드
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USERNAME}}
          key: ${{secrets.EC2_KEY}}
          source: "server-compose.yml"
          target: "./docker"

      - name: Docker Compose 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USERNAME}}
          key: ${{secrets.EC2_KEY}}
          script: |
            docker login -u ${{secrets.DOCKER_HUB_NAME}} -p ${{secrets.DOCKER_HUB_PASSWORD}}
            docker compose -f ./docker/server-compose.yml pull
            docker compose -f ./docker/server-compose.yml up
